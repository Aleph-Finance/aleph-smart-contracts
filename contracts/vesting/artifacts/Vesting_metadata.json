{
	"compiler": {
		"version": "0.8.12+commit.f00d7308"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_minPeriod",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_withdrawalCap",
						"type": "uint256"
					},
					{
						"internalType": "contract ERC20",
						"name": "_vestingCoin",
						"type": "address"
					},
					{
						"internalType": "enum FrequencyHelper.Frequency",
						"name": "_withdrawalFrequency",
						"type": "uint8"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "AdminAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "AdminRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "_memberName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_releaseOn",
						"type": "uint256"
					}
				],
				"name": "AllocationCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "_memberName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_lessAmount",
						"type": "uint256"
					}
				],
				"name": "AllocationDecreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "_memberName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "AllocationDeleted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "_memberName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_additionalAmount",
						"type": "uint256"
					}
				],
				"name": "AllocationIncreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_remainingInPool",
						"type": "uint256"
					}
				],
				"name": "FundRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_funder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_previousCap",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_newCap",
						"type": "uint256"
					}
				],
				"name": "Funded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Pause",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "_memberName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_releaseOn",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_newReleaseDate",
						"type": "uint256"
					}
				],
				"name": "ScheduleExtended",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Unpause",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "_memberName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "Withdrawn",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "addAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_accounts",
						"type": "address[]"
					}
				],
				"name": "addManyAdmins",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "admins",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_memberName",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_releaseOn",
						"type": "uint256"
					}
				],
				"name": "createAllocation",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_lessAmount",
						"type": "uint256"
					}
				],
				"name": "decreaseAllocation",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "deleteAllocation",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "earliestWithdrawalDate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_newReleaseDate",
						"type": "uint256"
					}
				],
				"name": "extendAllocation",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fund",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAmountInVesting",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAvailableFunds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "getDrawingPower",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_additionalAmount",
						"type": "uint256"
					}
				],
				"name": "increaseAllocation",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "minimumVestingPeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "removeAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "removeFunds",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_accounts",
						"type": "address[]"
					}
				],
				"name": "removeManyAdmins",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalVested",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalWithdrawn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vestingCoin",
				"outputs": [
					{
						"internalType": "contract ERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vestingStartedOn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawalCap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawalFrequency",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A token holder contract that can release its token balance gradually like a typical vesting scheme, vesting period. Optionally revocable by the creator.",
			"kind": "dev",
			"methods": {
				"addAdmin(address)": {
					"params": {
						"_address": "The address to add to the administrator list."
					}
				},
				"addManyAdmins(address[])": {
					"params": {
						"_accounts": "The wallet addresses to add to the administrator list."
					}
				},
				"constructor": {
					"params": {
						"_minPeriod": "The minimum vesting period.",
						"_vestingCoin": "The ERC20 contract of the coin being vested.",
						"_withdrawalCap": "Maximum amount of tokens that can be withdrawn for the specified frequency.",
						"_withdrawalFrequency": "The frequency of token withdrawals. If the _withdrawalCap is zero, this variable is ignored."
					}
				},
				"createAllocation(address,string,uint256,uint256)": {
					"params": {
						"_address": "The address which will receive the tokens in the future date.",
						"_amount": "The total amount of tokens being vested over the period of vesting duration.",
						"_memberName": "The name of the candidate for which this vesting schedule allocation is being created for.",
						"_releaseOn": "The date on which the first vesting schedule becomes available for withdrawal."
					},
					"returns": {
						"_0": "Returns true if the vesting schedule allocation was successfully created."
					}
				},
				"decreaseAllocation(address,uint256)": {
					"params": {
						"_address": "The address of the beneficiary whose allocation is being requested to be decreased.",
						"_lessAmount": "The amount in vesting coin to be decreased from the existing allocation."
					},
					"returns": {
						"_0": "Returns true if the vesting schedule allocation was successfully decreased."
					}
				},
				"deleteAllocation(address)": {
					"params": {
						"_address": "The address of the beneficiary whose allocation is being requested to be deleted."
					},
					"returns": {
						"_0": "Returns true if the vesting schedule allocation was successfully deleted."
					}
				},
				"extendAllocation(address,uint256)": {
					"params": {
						"_address": "The address of the beneficiary who allocation is being requested to be extended.",
						"_newReleaseDate": "A new release date to extend the allocation to."
					},
					"returns": {
						"_0": "Returns true if the vesting schedule allocation was successfully extended."
					}
				},
				"fund()": {
					"returns": {
						"_0": "Returns true if the funding was successful."
					}
				},
				"getAvailableFunds()": {
					"returns": {
						"_0": "Returns the closing balance of vesting coin held by this contract."
					}
				},
				"getDrawingPower(address)": {
					"params": {
						"_address": "The address to check the drawing power of."
					},
					"returns": {
						"_0": "Returns the amount in vesting coin that can be withdrawn."
					}
				},
				"increaseAllocation(address,uint256)": {
					"params": {
						"_additionalAmount": "The additional amount in vesting coin to be addeded to the existing allocation.",
						"_address": "The address of the beneficiary whose allocation is being requested to be increased."
					},
					"returns": {
						"_0": "Returns true if the vesting schedule allocation was successfully increased."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeAdmin(address)": {
					"params": {
						"_address": "The address to remove from the administrator list."
					}
				},
				"removeFunds(uint256)": {
					"params": {
						"_amount": "The amount desired to withdraw."
					},
					"returns": {
						"_0": "Returns true if the withdrawal was successful."
					}
				},
				"removeManyAdmins(address[])": {
					"params": {
						"_accounts": "The wallet addresses to add to the administrator list."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"withdraw(uint256)": {
					"params": {
						"_amount": "The amount in vesting coin desired to withdraw."
					}
				}
			},
			"title": "Vesting",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Funded(address,uint256,uint256,uint256)": {
					"notice": "Events;"
				}
			},
			"kind": "user",
			"methods": {
				"addAdmin(address)": {
					"notice": "Adds the specified address to the list of administrators."
				},
				"addManyAdmins(address[])": {
					"notice": "Adds multiple addresses to the administrator list."
				},
				"admins(address)": {
					"notice": "List of administrators."
				},
				"constructor": {
					"notice": "Constructs this contract"
				},
				"createAllocation(address,string,uint256,uint256)": {
					"notice": "Creates a vesting schedule allocation for a new beneficiary. A beneficiary could mean founders, employees, or advisors. Please note that this action can only be performed by an administrator."
				},
				"decreaseAllocation(address,uint256)": {
					"notice": "Decreases the total allocation of the specified vesting schedule. Please note that this action can only be performed by an administrator."
				},
				"deleteAllocation(address)": {
					"notice": "Deletes the specified vesting schedule allocation. Please note that this action can only be performed by an administrator."
				},
				"earliestWithdrawalDate()": {
					"notice": "The earliest date on which the vested tokens can be redeemed."
				},
				"extendAllocation(address,uint256)": {
					"notice": "Extends the release date of the specified vesting schedule allocation. Please note that this action can only be performed by an administrator."
				},
				"fund()": {
					"notice": "Enables this vesting contract to receive the ERC20 (vesting coin). Before calling this function please approve your desired amount of the coin for this smart contract address. Please note that this action is restricted to administrators only."
				},
				"getAvailableFunds()": {
					"notice": "The balance of this smart contract. "
				},
				"getDrawingPower(address)": {
					"notice": "Gets the drawing power of the beneficiary."
				},
				"increaseAllocation(address,uint256)": {
					"notice": "Increases the total allocation of the specified vesting schedule. Please note that this action can only be performed by an administrator."
				},
				"minimumVestingPeriod()": {
					"notice": "The minimum period of vesting."
				},
				"pause()": {
					"notice": "Pauses the contract."
				},
				"removeAdmin(address)": {
					"notice": "Removes the specified address from the list of administrators."
				},
				"removeFunds(uint256)": {
					"notice": "Allows you to withdraw the surplus balance of the vesting coin from this contract. Please note that this action is restricted to administrators only and you may only withdraw amounts above the sum total allocation balances."
				},
				"removeManyAdmins(address[])": {
					"notice": "Removes multiple addresses to the administrator list."
				},
				"totalVested()": {
					"notice": "The sum total amount of tokens vested for all allocations."
				},
				"totalWithdrawn()": {
					"notice": "The sum total amount of tokens withdrawn from all allocations."
				},
				"unpause()": {
					"notice": "Unpauses the contract and returns to normal state."
				},
				"vestingCoin()": {
					"notice": "The ERC20 contract of the coin being vested."
				},
				"vestingStartedOn()": {
					"notice": "The date on which the vesting was started. "
				},
				"withdraw(uint256)": {
					"notice": "This action enables the beneficiaries to withdraw a desired amount from this contract.    "
				},
				"withdrawalCap()": {
					"notice": "Maximum amount of tokens that can be withdrawn for the specified frequency. Zero means that there's no cap;"
				},
				"withdrawalFrequency()": {
					"notice": "The frequency of token withdrawals. If the withdrawalCap is zero, this variable is ignored."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/vesting/vesting.sol": "Vesting"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xb45e104b4d8ecd7f3ad94bdebd7a76bfa258f5bc91444bb4858f75616cfad140",
			"license": "MIT",
			"urls": [
				"bzz-raw://06abef552fe0601522ef089d68e2f79ed8d15fe0c06dd4f35d7e6e5a1e247363",
				"dweb:/ipfs/QmaT69xxfRukB41W5gWBRDEA5Y96etSExwvqV6qn75g3mg"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://12af4ac016f9fdf3be5d15824f4292272aa11f6b2e0192a0f7320f5ad49bbbf0",
				"dweb:/ipfs/QmRXMpdqCgA3TYuYxBodqs5p9jGbnMW6xa2gvjppvq4TWk"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2",
			"license": "MIT",
			"urls": [
				"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824",
				"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21",
			"license": "MIT",
			"urls": [
				"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2",
				"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y"
			]
		},
		"contracts/vesting/CustomAdmin.sol": {
			"keccak256": "0x67915c5fb4df6be47ce79b8cb694163c84801c0dd678e570bb8793aafa7a7376",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://3a555e5afa823818ee6ba6180d445c19f501a230f76127ea717588e8b7a3b708",
				"dweb:/ipfs/QmRPNpHpGKoQR68X4SqPXABEpztj8PagrJ3Rmt3g11fNvK"
			]
		},
		"contracts/vesting/CustomPausable.sol": {
			"keccak256": "0x762f7f6014bae61e98d7c87405bbfdbef00fd9c4be3b615d5556f389293ed344",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://39e4d55f7c867937d13ae73838f5c498ae24419a86d364010850e4701899ff04",
				"dweb:/ipfs/QmRN7UGtxJq8K3Dnq9nvbuQkdgq4MyPzKEZUyHuzV6mCbq"
			]
		},
		"contracts/vesting/frequencyHelper.sol": {
			"keccak256": "0x65fdadd3fad04c6e0c499642d7f42a322c874e84b2bf82b2eba38beb6c0e76fb",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://8d4d89d50b0c80297edbb0258aca161e1639b19868f6a2bd49f7649315e6d407",
				"dweb:/ipfs/QmNyamVo61Be63ByUc73cHautbVYmmVsomH3zjnyKgMRJB"
			]
		},
		"contracts/vesting/vesting.sol": {
			"keccak256": "0xad1532a845e0d2045e9cf1674d0bfc52a120707008dceaf8aef68f195b5b6094",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://206ac9a1ebf9b496a0c6120afbf7d475bf300a0de7aee893525b917c54e829bf",
				"dweb:/ipfs/QmPb9RQUP5uYVJS2SgXzknKmviFEJfZUwfM3rWoDUEfmwC"
			]
		}
	},
	"version": 1
}