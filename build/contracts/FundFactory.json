{
  "contractName": "FundFactory",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "daoInvestmentFundRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "individualInvestmentFundRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FundFactory.InvestmentFundType",
          "name": "investmentFund",
          "type": "uint8"
        }
      ],
      "name": "createNewFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FundFactory.InvestmentFundType",
          "name": "investmentFund",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        }
      ],
      "name": "burnExistingFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum FundFactory.InvestmentFundType\",\"name\":\"investmentFund\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"burnExistingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FundFactory.InvestmentFundType\",\"name\":\"investmentFund\",\"type\":\"uint8\"}],\"name\":\"createNewFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoInvestmentFundRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"individualInvestmentFundRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Description: This contract will function as a manager + factory for the investment fund contracts. Some of the main functionality for the `FundFactory` contract will be to: - Create a new user fund - \\\"Burning\\\" exsiting user's fund - Managing access control to protect user's account Currently there are two types of funds: - Individual Investment Fund - DAO Investment Fund\",\"kind\":\"dev\",\"methods\":{\"burnExistingFund(uint8,address)\":{\"details\":\"\\\"Burn\\\" an existing user account of `accountAddress`\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createNewFund(uint8)\":{\"details\":\"Create new user account with type based on `accountId`\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"individualInvestmentFundRegistry(address)\":{\"notice\":\"Fund REGISTRIES The registry variables is used to store users account information in mapping type - first address is for user address, e.g. msg.sender - second address is for fund's address (type: individual or DAO investment fund)\"}},\"notice\":\"THIS IS THE `FundFactory` contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/account/FundFactory.sol\":\"FundFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99b6d76e111f18169a6c3f9043a843f188a02b5737dc35e6c6535ee04858f1c7\",\"dweb:/ipfs/QmeibhmsicNMWMw1gggSknJsbm1WUtZgGokGnzd4CCZzTw\"]},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92112fc87990f2d55c538946266c48f43e6ca442186ef3b8172eb4632deb0db3\",\"dweb:/ipfs/QmU6pqFXYT8fYfyhw7viRA775eBH4W7PAd589DVFGtSgxo\"]},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bda1319db846d6d6f92d8a57a9bdee8bde1dc39aa7546165791692c24dd6f30a\",\"dweb:/ipfs/Qma5oZ7DmbdAjd8mpiW7mx896PDtwsQtCQ2hj9Upf7b7JK\"]},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts/governance/Governor.sol\":{\"keccak256\":\"0xfaf7663a441cf4161aeceda4907949d537d409b4348e6b242b2a74b4a2d56ce2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f8449e1799d6f469b7512fd004add19cf06aeca4ca56209b210eadbdd45b4ec\",\"dweb:/ipfs/QmbCrDbU15EbfwPVKBwMDqMouPLE4o7eofFCzTg3MLRsLz\"]},\"@openzeppelin/contracts/governance/IGovernor.sol\":{\"keccak256\":\"0x4a3702e2556bc04120a353119d50cb5edbc6f5c9c5504b04e598b9195b0e5471\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4b635d424a6bfb9a7b0c41dd1bef569cbc35784746900dc59f96a93f4e5aec07\",\"dweb:/ipfs/QmZikwbT5GzxHA71ExAEnsRC2DHKDg1hdoRLkjJ1XndDM8\"]},\"@openzeppelin/contracts/governance/TimelockController.sol\":{\"keccak256\":\"0x61357e3fe6a0a93c779bc75f730d219458b268ffd19c0c0a6f31c7eb0f435466\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://510ed36606d4602eb167a9c66c3ccfcc863061ed64c7cd778729cd866b02e88e\",\"dweb:/ipfs/QmTCu2EYrP5jRhwK7zSdGyezANdb1xfP55zyLnfe8MAYCL\"]},\"@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol\":{\"keccak256\":\"0x42fdf674e422c97ee262f0dd1e636de1ee6c1556e61e38b167217e49381eff1f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76957235677148cdffbc89353c238d3dbc3f3a978bd2b35104a85a4289ba9383\",\"dweb:/ipfs/QmYH2J9zp6GsKsV2QTpi7CJLyWkGxMwBYf718CnudFBRmA\"]},\"@openzeppelin/contracts/governance/extensions/GovernorSettings.sol\":{\"keccak256\":\"0xab3781f09dfb447d0c2f5bbb2aafc9ff86333f16c61580ab85d7c8a87491eab9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://58571bc89cd0e54fa9af6b41e53e2110c6f5767eb691af8ad88759dbde07b3fd\",\"dweb:/ipfs/QmbeoatuYT5ukpGLWZh4DHb7yrC3TpBbm9hDdWwkdUuUy4\"]},\"@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol\":{\"keccak256\":\"0x027e928dff85e88a4c24d5530f61fd6db43052e1430f3f3c7469b6d54ed87f87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60ddacd61e801ca58ffb97dfe82af44c92b09148f936254405e2721e8b8c2070\",\"dweb:/ipfs/QmPHkpauTUa8UrPYCjFwKYiar1AzT2tmX7T1XjczwdcD33\"]},\"@openzeppelin/contracts/governance/extensions/GovernorVotes.sol\":{\"keccak256\":\"0x8f181616d38bc85021c06f1b3acce5ee05339864416b2d328948fb46a378c77f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e67f3acc42fc19f8c7ed2f56c3d881bfa771b1ce2854e1100a086dc0b6cb5b30\",\"dweb:/ipfs/QmPAd8sy6t5Ck3wC7WyzECbVGYPfV6WNius4UoH2rzc7yp\"]},\"@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol\":{\"keccak256\":\"0xc3dee116eda4152b8e6ff4b51cc9cce35bc9ce27b1ea91e95f7f381315bcb78d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b42a49c70f50b2fc56a2fe58ee9e9a4b0d4250223e3b3001d5c047fa9293f65b\",\"dweb:/ipfs/QmdadAsLSAYFingn2khRfh5NFUvmETRTyig9Fh3i4skrPY\"]},\"@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol\":{\"keccak256\":\"0xe6234ac4ba0508a3371a46543cdf4bf3a1a404d2d3c3470006741a0da294f974\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f65e0806425afa3946ba400879444d73b0b9320534eaecb2c64dc3689cff0614\",\"dweb:/ipfs/QmbpjBrErEMrx9qbS529XXbfooHfkihCj9iBz2QWiw4Xe4\"]},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f41fe2bddc33c17ccccfc25379b1869354e9ee62d8b28d2acc95229eeba37a86\",\"dweb:/ipfs/Qmb6SF2XL2uSvH6k5JSjtx4Xoqz41ACkhdAhtbW1Yh3RiY\"]},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f319af26a9ade3e6cf3698bf1b84aa6213bdd7a76606ea9ba56ced163593934\",\"dweb:/ipfs/QmZ2u9zen5Htan4dSP1RZCY2XqB9HUwqkNCMzdn7aV2jWc\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/Timers.sol\":{\"keccak256\":\"0x29791a62950a7983e02a673639c1a781d1e448691800456c2ce4b99715391b14\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://38f37b3c682657d4b1790b5e564d4c9445856c93aa79ffed43fd076959118118\",\"dweb:/ipfs/QmcBGSacnV1JDz7kicsFijDYBxx5CmLSjUSJVLqyn7zH3G\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://466ffb5a6e3bd65fffd996f9287ffd240ea21588a338c6efe143d94eaed014a7\",\"dweb:/ipfs/Qmans3vvPJZcvxe9KLAPc9Xwe4TFVTJdzaQGpi62Vrhoe2\"]},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba\",\"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb62abcee612c175f1b9bc70e5dfe5bd23473c99987ade6e80e291f68dc60ff1\",\"dweb:/ipfs/QmZCMajhG7FtRYNDwBchXN89mXR6HLPVzr9732qfUdNf9E\"]},\"project:/contracts/account/DAOInvestmentFund/DAOInvestmentFundBase.sol\":{\"keccak256\":\"0xc48891590d6805e4e4e4b6dca095fa88a52a876a4e4dfedf2e55bb6fceb3394d\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://d306f01c356aa3bfd80b63096e2aa1d25d46265b736a0cecac8d8b6f5eb5acca\",\"dweb:/ipfs/QmbPVS4kT9uHntCbPWohEEt8cRbqY4Cg1sgaPiUxvh57k7\"]},\"project:/contracts/account/FundFactory.sol\":{\"keccak256\":\"0x430811a03bca55a3ce6b3c509e445f4c3bfecb175f1db1470feeb77d725bfb78\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://d77317abcb9f49d5e3675b9186a69bd1d81dd23f5e4dd6da89ae542740748215\",\"dweb:/ipfs/QmQcJ9yDzYMn33YWEVf1YznUERZm5po5Mm2cMykwJeuTh8\"]},\"project:/contracts/account/IndividualInvestmentFund.sol\":{\"keccak256\":\"0xebc90e938a6adff8daba3cd419738f7302ca5150dc6c78169fd6413d19c961e1\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://64e614703feceb3b388eaa155b00e78a300fd8affc10f653efdc8a461edb080a\",\"dweb:/ipfs/Qmck3g869qAFWvj6mob9w5YKmNcKTubVoJrD3S8QFj6erM\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600054610100900460ff1661002c5760005460ff1615610034565b6100346100d5565b61009b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100bd576000805461ffff19166101011790555b80156100cf576000805461ff00191690555b506100ff565b60006100ea306100f060201b6102e91760201c565b15905090565b6001600160a01b03163b151590565b61126a8061010e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80638564c5f6146100515780638c372db1146100965780639b1332d7146100bf578063cabed6c9146100d4575b600080fd5b61007a61005f3660046103a2565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61007a6100a43660046103a2565b6001602052600090815260409020546001600160a01b031681565b6100d26100cd3660046103d3565b6100e7565b005b6100d26100e23660046103ee565b6101e4565b60008160018111156100fb576100fb610421565b141561015d57600060405161010f90610379565b604051809103906000f08015801561012b573d6000803e3d6000fd5b5033600090815260016020526040902080546001600160a01b0319166001600160a01b03929092169190911790555050565b600181600181111561017157610171610421565b14156101975733600090815260026020526040902080546001600160a01b031916905550565b60405162461bcd60e51b815260206004820152601c60248201527f4e6f7420612076616c6964206163636f756e74496420676976656e210000000060448201526064015b60405180910390fd5b8181806001600160a01b03166101fa83336102f8565b6001600160a01b03161461026f5760405162461bcd60e51b815260206004820152603660248201527f596f7520617265206e6f7420746865206163636f756e74206f776e6572206f666044820152752074686973206163636f756e7420616464726573732160501b60648201526084016101db565b600084600181111561028357610283610421565b14156102ab5733600090815260016020526040902080546001600160a01b03191690556102e3565b60018460018111156102bf576102bf610421565b14156102e35733600090815260026020526040902080546001600160a01b03191690555b50505050565b6001600160a01b03163b151590565b60008083600181111561030d5761030d610421565b141561033457506001600160a01b0380821660009081526001602052604090205416610373565b600183600181111561034857610348610421565b141561036f57506001600160a01b0380821660009081526002602052604090205416610373565b5060005b92915050565b610dfd8061043883390190565b80356001600160a01b038116811461039d57600080fd5b919050565b6000602082840312156103b457600080fd5b6103bd82610386565b9392505050565b80356002811061039d57600080fd5b6000602082840312156103e557600080fd5b6103bd826103c4565b6000806040838503121561040157600080fd5b61040a836103c4565b915061041860208401610386565b90509250929050565b634e487b7160e01b600052602160045260246000fdfe608060405234801561001057600080fd5b50610ddd806100206000396000f3fe60806040526004361061007f5760003560e01c806391d148541161004e57806391d1485414610140578063a217fddf14610160578063a516a5bf14610175578063d547741f1461018857600080fd5b806301ffc9a71461008b578063248a9ca3146100c05780632f2ff15d146100fe57806336568abe1461012057600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a63660046107c6565b6101a8565b60405190151581526020015b60405180910390f35b3480156100cc57600080fd5b506100f06100db3660046107f0565b60009081526020819052604090206001015490565b6040519081526020016100b7565b34801561010a57600080fd5b5061011e610119366004610825565b6101df565b005b34801561012c57600080fd5b5061011e61013b366004610825565b61020a565b34801561014c57600080fd5b506100ab61015b366004610825565b61028d565b34801561016c57600080fd5b506100f0600081565b6100ab610183366004610a0b565b6102b6565b34801561019457600080fd5b5061011e6101a3366004610825565b610381565b60006001600160e01b03198216637965db0b60e01b14806101d957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546101fb81336103a7565b610205838361040b565b505050565b6001600160a01b038116331461027f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610289828261048f565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000825184511480156102ca575081518451145b6103305760405162461bcd60e51b815260206004820152603160248201527f496e646976696475616c496e766573746d656e7446756e643a2070726f706f73604482015270185b081b9bdd081cdd58d8d95cdcd99d5b607a1b6064820152608401610276565b61033b8484846104f4565b7f5a68aca1ebdfea9d71dfa10bfe3071e67281ed3496ae43926673c2740df3bfcf84848460405161036e93929190610ba0565b60405180910390a15060015b9392505050565b60008281526020819052604090206001015461039d81336103a7565b610205838361048f565b6103b1828261028d565b610289576103c9816001600160a01b031660146105f1565b6103d48360206105f1565b6040516020016103e5929190610c37565b60408051601f198184030181529082905262461bcd60e51b825261027691600401610cac565b610415828261028d565b610289576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561044b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610499828261028d565b15610289576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000604051806060016040528060378152602001610d7160379139905060005b84518110156105ea5760008086838151811061053257610532610cbf565b60200260200101516001600160a01b031686848151811061055557610555610cbf565b602002602001015186858151811061056f5761056f610cbf565b60200260200101516040516105849190610cd5565b60006040518083038185875af1925050503d80600081146105c1576040519150601f19603f3d011682016040523d82523d6000602084013e6105c6565b606091505b50915091506105d682828661078d565b505050806105e390610d07565b9050610514565b5050505050565b60606000610600836002610d22565b61060b906002610d41565b67ffffffffffffffff81111561062357610623610851565b6040519080825280601f01601f19166020018201604052801561064d576020820181803683370190505b509050600360fc1b8160008151811061066857610668610cbf565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061069757610697610cbf565b60200101906001600160f81b031916908160001a90535060006106bb846002610d22565b6106c6906001610d41565b90505b600181111561073e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106106fa576106fa610cbf565b1a60f81b82828151811061071057610710610cbf565b60200101906001600160f81b031916908160001a90535060049490941c9361073781610d59565b90506106c9565b50831561037a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610276565b6060831561079c57508161037a565b8251156107ac5782518084602001fd5b8160405162461bcd60e51b81526004016102769190610cac565b6000602082840312156107d857600080fd5b81356001600160e01b03198116811461037a57600080fd5b60006020828403121561080257600080fd5b5035919050565b80356001600160a01b038116811461082057600080fd5b919050565b6000806040838503121561083857600080fd5b8235915061084860208401610809565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561089057610890610851565b604052919050565b600067ffffffffffffffff8211156108b2576108b2610851565b5060051b60200190565b600082601f8301126108cd57600080fd5b813560206108e26108dd83610898565b610867565b82815260059290921b8401810191818101908684111561090157600080fd5b8286015b8481101561091c5780358352918301918301610905565b509695505050505050565b6000601f838184011261093957600080fd5b823560206109496108dd83610898565b82815260059290921b8501810191818101908784111561096857600080fd5b8287015b848110156109ff57803567ffffffffffffffff8082111561098d5760008081fd5b818a0191508a603f8301126109a25760008081fd5b858201356040828211156109b8576109b8610851565b6109c9828b01601f19168901610867565b92508183528c818386010111156109e05760008081fd5b818185018985013750600090820187015284525091830191830161096c565b50979650505050505050565b600080600060608486031215610a2057600080fd5b833567ffffffffffffffff80821115610a3857600080fd5b818601915086601f830112610a4c57600080fd5b81356020610a5c6108dd83610898565b82815260059290921b8401810191818101908a841115610a7b57600080fd5b948201945b83861015610aa057610a9186610809565b82529482019490820190610a80565b97505087013592505080821115610ab657600080fd5b610ac2878388016108bc565b93506040860135915080821115610ad857600080fd5b50610ae586828701610927565b9150509250925092565b60005b83811015610b0a578181015183820152602001610af2565b83811115610b19576000848401525b50505050565b60008151808452610b37816020860160208601610aef565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015610b93578284038952610b81848351610b1f565b98850198935090840190600101610b69565b5091979650505050505050565b606080825284519082018190526000906020906080840190828801845b82811015610be25781516001600160a01b031684529284019290840190600101610bbd565b5050508381038285015285518082528683019183019060005b81811015610c1757835183529284019291840191600101610bfb565b50508481036040860152610c2b8187610b4b565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610c6f816017850160208801610aef565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610ca0816028840160208801610aef565b01602801949350505050565b60208152600061037a6020830184610b1f565b634e487b7160e01b600052603260045260246000fd5b60008251610ce7818460208701610aef565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610d1b57610d1b610cf1565b5060010190565b6000816000190483118215151615610d3c57610d3c610cf1565b500290565b60008219821115610d5457610d54610cf1565b500190565b600081610d6857610d68610cf1565b50600019019056fe496e646976696475616c496e766573746d656e7446756e643a2063616c6c20726576657274656420776974686f7574206d657373616765a264697066735822122049e3d92872b0e9dd4b3d021ebdda32d89c6c3617e4969fb7326169481bee756364736f6c634300080b0033a26469706673582212202b8eedff532beeb10d019875efadc2c1fcd66f15840777826a68bb5dd0ef1aed64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80638564c5f6146100515780638c372db1146100965780639b1332d7146100bf578063cabed6c9146100d4575b600080fd5b61007a61005f3660046103a2565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61007a6100a43660046103a2565b6001602052600090815260409020546001600160a01b031681565b6100d26100cd3660046103d3565b6100e7565b005b6100d26100e23660046103ee565b6101e4565b60008160018111156100fb576100fb610421565b141561015d57600060405161010f90610379565b604051809103906000f08015801561012b573d6000803e3d6000fd5b5033600090815260016020526040902080546001600160a01b0319166001600160a01b03929092169190911790555050565b600181600181111561017157610171610421565b14156101975733600090815260026020526040902080546001600160a01b031916905550565b60405162461bcd60e51b815260206004820152601c60248201527f4e6f7420612076616c6964206163636f756e74496420676976656e210000000060448201526064015b60405180910390fd5b8181806001600160a01b03166101fa83336102f8565b6001600160a01b03161461026f5760405162461bcd60e51b815260206004820152603660248201527f596f7520617265206e6f7420746865206163636f756e74206f776e6572206f666044820152752074686973206163636f756e7420616464726573732160501b60648201526084016101db565b600084600181111561028357610283610421565b14156102ab5733600090815260016020526040902080546001600160a01b03191690556102e3565b60018460018111156102bf576102bf610421565b14156102e35733600090815260026020526040902080546001600160a01b03191690555b50505050565b6001600160a01b03163b151590565b60008083600181111561030d5761030d610421565b141561033457506001600160a01b0380821660009081526001602052604090205416610373565b600183600181111561034857610348610421565b141561036f57506001600160a01b0380821660009081526002602052604090205416610373565b5060005b92915050565b610dfd8061043883390190565b80356001600160a01b038116811461039d57600080fd5b919050565b6000602082840312156103b457600080fd5b6103bd82610386565b9392505050565b80356002811061039d57600080fd5b6000602082840312156103e557600080fd5b6103bd826103c4565b6000806040838503121561040157600080fd5b61040a836103c4565b915061041860208401610386565b90509250929050565b634e487b7160e01b600052602160045260246000fdfe608060405234801561001057600080fd5b50610ddd806100206000396000f3fe60806040526004361061007f5760003560e01c806391d148541161004e57806391d1485414610140578063a217fddf14610160578063a516a5bf14610175578063d547741f1461018857600080fd5b806301ffc9a71461008b578063248a9ca3146100c05780632f2ff15d146100fe57806336568abe1461012057600080fd5b3661008657005b600080fd5b34801561009757600080fd5b506100ab6100a63660046107c6565b6101a8565b60405190151581526020015b60405180910390f35b3480156100cc57600080fd5b506100f06100db3660046107f0565b60009081526020819052604090206001015490565b6040519081526020016100b7565b34801561010a57600080fd5b5061011e610119366004610825565b6101df565b005b34801561012c57600080fd5b5061011e61013b366004610825565b61020a565b34801561014c57600080fd5b506100ab61015b366004610825565b61028d565b34801561016c57600080fd5b506100f0600081565b6100ab610183366004610a0b565b6102b6565b34801561019457600080fd5b5061011e6101a3366004610825565b610381565b60006001600160e01b03198216637965db0b60e01b14806101d957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546101fb81336103a7565b610205838361040b565b505050565b6001600160a01b038116331461027f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610289828261048f565b5050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000825184511480156102ca575081518451145b6103305760405162461bcd60e51b815260206004820152603160248201527f496e646976696475616c496e766573746d656e7446756e643a2070726f706f73604482015270185b081b9bdd081cdd58d8d95cdcd99d5b607a1b6064820152608401610276565b61033b8484846104f4565b7f5a68aca1ebdfea9d71dfa10bfe3071e67281ed3496ae43926673c2740df3bfcf84848460405161036e93929190610ba0565b60405180910390a15060015b9392505050565b60008281526020819052604090206001015461039d81336103a7565b610205838361048f565b6103b1828261028d565b610289576103c9816001600160a01b031660146105f1565b6103d48360206105f1565b6040516020016103e5929190610c37565b60408051601f198184030181529082905262461bcd60e51b825261027691600401610cac565b610415828261028d565b610289576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561044b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610499828261028d565b15610289576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000604051806060016040528060378152602001610d7160379139905060005b84518110156105ea5760008086838151811061053257610532610cbf565b60200260200101516001600160a01b031686848151811061055557610555610cbf565b602002602001015186858151811061056f5761056f610cbf565b60200260200101516040516105849190610cd5565b60006040518083038185875af1925050503d80600081146105c1576040519150601f19603f3d011682016040523d82523d6000602084013e6105c6565b606091505b50915091506105d682828661078d565b505050806105e390610d07565b9050610514565b5050505050565b60606000610600836002610d22565b61060b906002610d41565b67ffffffffffffffff81111561062357610623610851565b6040519080825280601f01601f19166020018201604052801561064d576020820181803683370190505b509050600360fc1b8160008151811061066857610668610cbf565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061069757610697610cbf565b60200101906001600160f81b031916908160001a90535060006106bb846002610d22565b6106c6906001610d41565b90505b600181111561073e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106106fa576106fa610cbf565b1a60f81b82828151811061071057610710610cbf565b60200101906001600160f81b031916908160001a90535060049490941c9361073781610d59565b90506106c9565b50831561037a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610276565b6060831561079c57508161037a565b8251156107ac5782518084602001fd5b8160405162461bcd60e51b81526004016102769190610cac565b6000602082840312156107d857600080fd5b81356001600160e01b03198116811461037a57600080fd5b60006020828403121561080257600080fd5b5035919050565b80356001600160a01b038116811461082057600080fd5b919050565b6000806040838503121561083857600080fd5b8235915061084860208401610809565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561089057610890610851565b604052919050565b600067ffffffffffffffff8211156108b2576108b2610851565b5060051b60200190565b600082601f8301126108cd57600080fd5b813560206108e26108dd83610898565b610867565b82815260059290921b8401810191818101908684111561090157600080fd5b8286015b8481101561091c5780358352918301918301610905565b509695505050505050565b6000601f838184011261093957600080fd5b823560206109496108dd83610898565b82815260059290921b8501810191818101908784111561096857600080fd5b8287015b848110156109ff57803567ffffffffffffffff8082111561098d5760008081fd5b818a0191508a603f8301126109a25760008081fd5b858201356040828211156109b8576109b8610851565b6109c9828b01601f19168901610867565b92508183528c818386010111156109e05760008081fd5b818185018985013750600090820187015284525091830191830161096c565b50979650505050505050565b600080600060608486031215610a2057600080fd5b833567ffffffffffffffff80821115610a3857600080fd5b818601915086601f830112610a4c57600080fd5b81356020610a5c6108dd83610898565b82815260059290921b8401810191818101908a841115610a7b57600080fd5b948201945b83861015610aa057610a9186610809565b82529482019490820190610a80565b97505087013592505080821115610ab657600080fd5b610ac2878388016108bc565b93506040860135915080821115610ad857600080fd5b50610ae586828701610927565b9150509250925092565b60005b83811015610b0a578181015183820152602001610af2565b83811115610b19576000848401525b50505050565b60008151808452610b37816020860160208601610aef565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015610b93578284038952610b81848351610b1f565b98850198935090840190600101610b69565b5091979650505050505050565b606080825284519082018190526000906020906080840190828801845b82811015610be25781516001600160a01b031684529284019290840190600101610bbd565b5050508381038285015285518082528683019183019060005b81811015610c1757835183529284019291840191600101610bfb565b50508481036040860152610c2b8187610b4b565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610c6f816017850160208801610aef565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610ca0816028840160208801610aef565b01602801949350505050565b60208152600061037a6020830184610b1f565b634e487b7160e01b600052603260045260246000fd5b60008251610ce7818460208701610aef565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610d1b57610d1b610cf1565b5060010190565b6000816000190483118215151615610d3c57610d3c610cf1565b500290565b60008219821115610d5457610d54610cf1565b500190565b600081610d6857610d68610cf1565b50600019019056fe496e646976696475616c496e766573746d656e7446756e643a2063616c6c20726576657274656420776974686f7574206d657373616765a264697066735822122049e3d92872b0e9dd4b3d021ebdda32d89c6c3617e4969fb7326169481bee756364736f6c634300080b0033a26469706673582212202b8eedff532beeb10d019875efadc2c1fcd66f15840777826a68bb5dd0ef1aed64736f6c634300080b0033",
  "immutableReferences": {},
  "generatedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:426:71",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:71",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "188:236:71",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "205:9:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "216:2:71",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "198:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "198:21:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "198:21:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "239:9:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "250:2:71",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "235:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "235:18:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "255:2:71",
                        "type": "",
                        "value": "46"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "228:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "228:30:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "228:30:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "278:9:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "289:2:71",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "274:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "274:18:71"
                      },
                      {
                        "hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "294:34:71",
                        "type": "",
                        "value": "Initializable: contract is alrea"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "267:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "267:62:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "267:62:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "349:9:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "360:2:71",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "345:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "345:18:71"
                      },
                      {
                        "hexValue": "647920696e697469616c697a6564",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "365:16:71",
                        "type": "",
                        "value": "dy initialized"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "338:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "338:44:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "338:44:71"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "391:27:71",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "403:9:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "414:3:71",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "399:3:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "399:19:71"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "391:4:71"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "165:9:71",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "179:4:71",
                "type": ""
              }
            ],
            "src": "14:410:71"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n}",
      "id": 71,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:2200:71",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:71",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "63:124:71",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "73:29:71",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "95:6:71"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "82:12:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "82:20:71"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "73:5:71"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "165:16:71",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "174:1:71",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "177:1:71",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "167:6:71"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "167:12:71"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "167:12:71"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "124:5:71"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "135:5:71"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "150:3:71",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "155:1:71",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "146:3:71"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "146:11:71"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "159:1:71",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "142:3:71"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "142:19:71"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "131:3:71"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "131:31:71"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "121:2:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "121:42:71"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "114:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "114:50:71"
                  },
                  "nodeType": "YulIf",
                  "src": "111:70:71"
                }
              ]
            },
            "name": "abi_decode_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "42:6:71",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "53:5:71",
                "type": ""
              }
            ],
            "src": "14:173:71"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "262:116:71",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "308:16:71",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "317:1:71",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "320:1:71",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "310:6:71"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "310:12:71"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "310:12:71"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "283:7:71"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "292:9:71"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "279:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "279:23:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "304:2:71",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "275:3:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "275:32:71"
                  },
                  "nodeType": "YulIf",
                  "src": "272:52:71"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "333:39:71",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "362:9:71"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_address",
                      "nodeType": "YulIdentifier",
                      "src": "343:18:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "343:29:71"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "333:6:71"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "228:9:71",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "239:7:71",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "251:6:71",
                "type": ""
              }
            ],
            "src": "192:186:71"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "484:102:71",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "494:26:71",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "506:9:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "517:2:71",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "502:3:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "502:18:71"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "494:4:71"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "536:9:71"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "551:6:71"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "567:3:71",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "572:1:71",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "563:3:71"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "563:11:71"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "576:1:71",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "559:3:71"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "559:19:71"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "547:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "547:32:71"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "529:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "529:51:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "529:51:71"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "453:9:71",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "464:6:71",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "475:4:71",
                "type": ""
              }
            ],
            "src": "383:203:71"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "656:94:71",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "666:29:71",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "688:6:71"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "675:12:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "675:20:71"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "666:5:71"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "728:16:71",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "737:1:71",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "740:1:71",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "730:6:71"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "730:12:71"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "730:12:71"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "717:5:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "724:1:71",
                            "type": "",
                            "value": "2"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "714:2:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "714:12:71"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "707:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "707:20:71"
                  },
                  "nodeType": "YulIf",
                  "src": "704:40:71"
                }
              ]
            },
            "name": "abi_decode_enum_InvestmentFundType",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "635:6:71",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "646:5:71",
                "type": ""
              }
            ],
            "src": "591:159:71"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "849:132:71",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "895:16:71",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "904:1:71",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "907:1:71",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "897:6:71"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "897:12:71"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "897:12:71"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "870:7:71"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "879:9:71"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "866:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "866:23:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "891:2:71",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "862:3:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "862:32:71"
                  },
                  "nodeType": "YulIf",
                  "src": "859:52:71"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "920:55:71",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "965:9:71"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_enum_InvestmentFundType",
                      "nodeType": "YulIdentifier",
                      "src": "930:34:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "930:45:71"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "920:6:71"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_enum$_InvestmentFundType_$10615",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "815:9:71",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "826:7:71",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "838:6:71",
                "type": ""
              }
            ],
            "src": "755:226:71"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1097:189:71",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1143:16:71",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1152:1:71",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1155:1:71",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1145:6:71"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1145:12:71"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1145:12:71"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "1118:7:71"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1127:9:71"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "1114:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1114:23:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1139:2:71",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "1110:3:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1110:32:71"
                  },
                  "nodeType": "YulIf",
                  "src": "1107:52:71"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1168:55:71",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1213:9:71"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_enum_InvestmentFundType",
                      "nodeType": "YulIdentifier",
                      "src": "1178:34:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1178:45:71"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "1168:6:71"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1232:48:71",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1265:9:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1276:2:71",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1261:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1261:18:71"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_address",
                      "nodeType": "YulIdentifier",
                      "src": "1242:18:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1242:38:71"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "1232:6:71"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_enum$_InvestmentFundType_$10615t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1055:9:71",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "1066:7:71",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1078:6:71",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "1086:6:71",
                "type": ""
              }
            ],
            "src": "986:300:71"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1323:95:71",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1340:1:71",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1347:3:71",
                            "type": "",
                            "value": "224"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1352:10:71",
                            "type": "",
                            "value": "0x4e487b71"
                          }
                        ],
                        "functionName": {
                          "name": "shl",
                          "nodeType": "YulIdentifier",
                          "src": "1343:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1343:20:71"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1333:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1333:31:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1333:31:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1380:1:71",
                        "type": "",
                        "value": "4"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1383:4:71",
                        "type": "",
                        "value": "0x21"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1373:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1373:15:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1373:15:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1404:1:71",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1407:4:71",
                        "type": "",
                        "value": "0x24"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "1397:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1397:15:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1397:15:71"
                }
              ]
            },
            "name": "panic_error_0x21",
            "nodeType": "YulFunctionDefinition",
            "src": "1291:127:71"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1597:178:71",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1614:9:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1625:2:71",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1607:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1607:21:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1607:21:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1648:9:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1659:2:71",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1644:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1644:18:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1664:2:71",
                        "type": "",
                        "value": "28"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1637:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1637:30:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1637:30:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1687:9:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1698:2:71",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1683:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1683:18:71"
                      },
                      {
                        "hexValue": "4e6f7420612076616c6964206163636f756e74496420676976656e21",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "1703:30:71",
                        "type": "",
                        "value": "Not a valid accountId given!"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1676:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1676:58:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1676:58:71"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1743:26:71",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1755:9:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1766:2:71",
                        "type": "",
                        "value": "96"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1751:3:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1751:18:71"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "1743:4:71"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_15f7cccdd529e230fa3f5cde8f5e4708c0979762d555cc2f8991d383cd98b14c__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1574:9:71",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1588:4:71",
                "type": ""
              }
            ],
            "src": "1423:352:71"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1954:244:71",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1971:9:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1982:2:71",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1964:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1964:21:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1964:21:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2005:9:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2016:2:71",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2001:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2001:18:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2021:2:71",
                        "type": "",
                        "value": "54"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1994:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1994:30:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1994:30:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2044:9:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2055:2:71",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2040:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2040:18:71"
                      },
                      {
                        "hexValue": "596f7520617265206e6f7420746865206163636f756e74206f776e6572206f66",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "2060:34:71",
                        "type": "",
                        "value": "You are not the account owner of"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2033:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2033:62:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2033:62:71"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2115:9:71"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2126:2:71",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2111:3:71"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2111:18:71"
                      },
                      {
                        "hexValue": "2074686973206163636f756e74206164647265737321",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "2131:24:71",
                        "type": "",
                        "value": " this account address!"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2104:6:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2104:52:71"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2104:52:71"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2165:27:71",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2177:9:71"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2188:3:71",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "2173:3:71"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2173:19:71"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "2165:4:71"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_618531ce49e1580eb7546fba5da436232be0a2d19444432fb69404fd555f1936__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1931:9:71",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1945:4:71",
                "type": ""
              }
            ],
            "src": "1780:418:71"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_enum_InvestmentFundType(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 2)) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_enum$_InvestmentFundType_$10615(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_enum_InvestmentFundType(headStart)\n    }\n    function abi_decode_tuple_t_enum$_InvestmentFundType_$10615t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_enum_InvestmentFundType(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_15f7cccdd529e230fa3f5cde8f5e4708c0979762d555cc2f8991d383cd98b14c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Not a valid accountId given!\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_618531ce49e1580eb7546fba5da436232be0a2d19444432fb69404fd555f1936__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"You are not the account owner of\")\n        mstore(add(headStart, 96), \" this account address!\")\n        tail := add(headStart, 128)\n    }\n}",
      "id": 71,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "695:2811:53:-:0;;;1683:28;;;;;;;;;-1:-1:-1;2358:13:16;;;;;;;:48;;2394:12;;;;2393:13;2358:48;;;2374:16;:14;:16::i;:::-;2350:107;;;;-1:-1:-1;;;2350:107:16;;216:2:71;2350:107:16;;;198:21:71;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:71;;;338:44;399:19;;2350:107:16;;;;;;;;2468:19;2491:13;;;;;;2490:14;2514:98;;;;2548:13;:20;;-1:-1:-1;;2582:19:16;;;;;2514:98;2638:14;2634:66;;;2684:5;2668:21;;-1:-1:-1;;2668:21:16;;;2634:66;2069:637;695:2811:53;;3026:112:16;3074:4;3098:33;3125:4;3098:18;;;;;:33;;:::i;:::-;3097:34;3090:41;;3026:112;:::o;1175:320:38:-;-1:-1:-1;;;;;1465:19:38;;:23;;;1175:320::o;14:410:71:-;695:2811:53;;;;;;",
  "deployedSourceMap": "695:2811:53:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1164:60;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1164:60:53;;;;;;-1:-1:-1;;;;;547:32:71;;;529:51;;517:2;502:18;1164:60:53;;;;;;;1091:67;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;1091:67:53;;;2314:658;;;;;;:::i;:::-;;:::i;:::-;;3058:446;;;;;;:::i;:::-;;:::i;2314:658::-;2413:29;2395:14;:47;;;;;;;;:::i;:::-;;2391:575;;;2458:52;2513:30;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2590:10:53;2557:44;;;;:32;:44;;;;;:113;;-1:-1:-1;;;;;;2557:113:53;-1:-1:-1;;;;;2557:113:53;;;;;;;;;;-1:-1:-1;2314:658:53;:::o;2391:575::-;2709:22;2691:14;:40;;;;;;;;:::i;:::-;;2687:279;;;2862:10;2884:1;2836:37;;;:25;:37;;;;;:50;;-1:-1:-1;;;;;;2836:50:53;;;2314:658;:::o;2687:279::-;2917:38;;-1:-1:-1;;;2917:38:53;;1625:2:71;2917:38:53;;;1607:21:71;1664:2;1644:18;;;1637:30;1703;1683:18;;;1676:58;1751:18;;2917:38:53;;;;;;;;3058:446;3186:14;3202;1512;-1:-1:-1;;;;;1459:67:53;:49;1481:14;1497:10;1459:21;:49::i;:::-;-1:-1:-1;;;;;1459:67:53;;1438:168;;;;-1:-1:-1;;;1438:168:53;;1982:2:71;1438:168:53;;;1964:21:71;2021:2;2001:18;;;1994:30;2060:34;2040:18;;;2033:62;-1:-1:-1;;;2111:18:71;;;2104:52;2173:19;;1438:168:53;1780:418:71;1438:168:53;3250:29:::1;3232:14;:47;;;;;;;;:::i;:::-;;3228:270;;;3328:10;3350:1;3295:44:::0;;;:32:::1;:44;::::0;;;;:57;;-1:-1:-1;;;;;;3295:57:53::1;::::0;;3228:270:::1;;;3391:22;3373:14;:40;;;;;;;;:::i;:::-;;3369:129;;;3455:10;3477:1;3429:37:::0;;;:25:::1;:37;::::0;;;;:50;;-1:-1:-1;;;;;;3429:50:53::1;::::0;;3369:129:::1;3058:446:::0;;;;:::o;1175:320:38:-;-1:-1:-1;;;;;1465:19:38;;:23;;;1175:320::o;1780:445:53:-;1908:7;;1931:14;:47;;;;;;;;:::i;:::-;;1927:292;;;-1:-1:-1;;;;;;2001:41:53;;;;;;;:32;:41;;;;;;;1994:48;;1927:292;2081:22;2063:14;:40;;;;;;;;:::i;:::-;;2059:160;;;-1:-1:-1;;;;;;2126:34:53;;;;;;;:25;:34;;;;;;;2119:41;;2059:160;-1:-1:-1;2206:1:53;2059:160;1780:445;;;;:::o;-1:-1:-1:-;;;;;;;;:::o;14:173:71:-;82:20;;-1:-1:-1;;;;;131:31:71;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;:::-;333:39;192:186;-1:-1:-1;;;192:186:71:o;591:159::-;675:20;;724:1;714:12;;704:40;;740:1;737;730:12;755:226;838:6;891:2;879:9;870:7;866:23;862:32;859:52;;;907:1;904;897:12;859:52;930:45;965:9;930:45;:::i;986:300::-;1078:6;1086;1139:2;1127:9;1118:7;1114:23;1110:32;1107:52;;;1155:1;1152;1145:12;1107:52;1178:45;1213:9;1178:45;:::i;:::-;1168:55;;1242:38;1276:2;1265:9;1261:18;1242:38;:::i;:::-;1232:48;;986:300;;;;;:::o;1291:127::-;1352:10;1347:3;1343:20;1340:1;1333:31;1383:4;1380:1;1373:15;1407:4;1404:1;1397:15",
  "source": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"./IndividualInvestmentFund.sol\";\nimport \"./DAOInvestmentFund/DAOInvestmentFundBase.sol\";\n\n/**\n * @notice THIS IS THE `FundFactory` contract\n *\n * @dev Description:\n *\n * This contract will function as a manager + factory for the investment fund contracts.\n * Some of the main functionality for the `FundFactory` contract will be to:\n * - Create a new user fund\n * - \"Burning\" exsiting user's fund\n * - Managing access control to protect user's account\n *\n * Currently there are two types of funds:\n * - Individual Investment Fund\n * - DAO Investment Fund\n */\ncontract FundFactory is Initializable {\n    enum InvestmentFundType {\n        INDIVIDUAL,\n        DAO\n    }\n\n    /**\n     * Fund REGISTRIES\n     *\n     * The registry variables is used to store users account information in mapping type\n     * - first address is for user address, e.g. msg.sender\n     * - second address is for fund's address (type: individual or DAO investment fund)\n     */\n    mapping(address => address) public individualInvestmentFundRegistry;\n    mapping(address => address) public daoInvestmentFundRegistry;\n\n    /**\n     * @dev Check whether `msg.sender` is the fund owner of `accountAddress`\n     */\n    modifier onlyFundOwner(\n        InvestmentFundType investmentFund,\n        address accountAddress\n    ) {\n        require(\n            getAccountAddressById(investmentFund, msg.sender) == accountAddress,\n            \"You are not the account owner of this account address!\"\n        );\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    /**\n     * @dev Get Account address by `accountId`\n     */\n    function getAccountAddressById(\n        InvestmentFundType investmentFund,\n        address account\n    ) internal view returns (address) {\n        if (investmentFund == InvestmentFundType.INDIVIDUAL) {\n            return individualInvestmentFundRegistry[account];\n        } else if (investmentFund == InvestmentFundType.DAO) {\n            return daoInvestmentFundRegistry[account];\n        } else {\n            return address(0);\n        }\n    }\n\n    /**\n     * @dev Create new user account with type based on `accountId`\n     */\n    function createNewFund(InvestmentFundType investmentFund) external {\n        if (investmentFund == InvestmentFundType.INDIVIDUAL) {\n            IndividualInvestmentFund newIndividualInvestmentFund = new IndividualInvestmentFund();\n            individualInvestmentFundRegistry[msg.sender] = address(\n                newIndividualInvestmentFund\n            );\n        } else if (investmentFund == InvestmentFundType.DAO) {\n            // DAOInvestmentFundBase newDAOInvestmentFund = new DAOInvestmentFundBase();\n            daoInvestmentFundRegistry[msg.sender] = address(0);\n        } else {\n            revert(\"Not a valid accountId given!\");\n        }\n    }\n\n    /**\n     * @dev \"Burn\" an existing user account of `accountAddress`\n     */\n    function burnExistingFund(\n        InvestmentFundType investmentFund,\n        address accountAddress\n    ) public onlyFundOwner(investmentFund, accountAddress) {\n        if (investmentFund == InvestmentFundType.INDIVIDUAL) {\n            individualInvestmentFundRegistry[msg.sender] = address(0);\n        } else if (investmentFund == InvestmentFundType.DAO) {\n            daoInvestmentFundRegistry[msg.sender] = address(0);\n        } else {}\n    }\n}\n",
  "sourcePath": "/Users/yosephks/Documents/GitHub/alpsfinance-smart-contracts/contracts/account/FundFactory.sol",
  "ast": {
    "absolutePath": "project:/contracts/account/FundFactory.sol",
    "exportedSymbols": {
      "AccessControl": [
        484
      ],
      "Address": [
        8316
      ],
      "BaseRelayRecipient": [
        146
      ],
      "Context": [
        8338
      ],
      "DAOInvestmentFundBase": [
        10604
      ],
      "ECDSA": [
        9236
      ],
      "EIP712": [
        9483
      ],
      "ERC165": [
        9507
      ],
      "FundFactory": [
        10791
      ],
      "Governor": [
        1517
      ],
      "GovernorCountingSimple": [
        2756
      ],
      "GovernorSettings": [
        2934
      ],
      "GovernorTimelockControl": [
        3311
      ],
      "GovernorVotes": [
        3351
      ],
      "GovernorVotesQuorumFraction": [
        3458
      ],
      "IAccessControl": [
        557
      ],
      "IERC165": [
        9519
      ],
      "IGovernor": [
        1753
      ],
      "IGovernorTimelock": [
        3499
      ],
      "IRelayRecipient": [
        175
      ],
      "IVotes": [
        3577
      ],
      "IndividualInvestmentFund": [
        10916
      ],
      "Initializable": [
        3651
      ],
      "SafeCast": [
        10000
      ],
      "Strings": [
        8615
      ],
      "TimelockController": [
        2532
      ],
      "Timers": [
        8829
      ]
    },
    "id": 10792,
    "license": "AGPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10606,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "38:24:53"
      },
      {
        "absolutePath": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "id": 10607,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10792,
        "sourceUnit": 3652,
        "src": "64:63:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/account/IndividualInvestmentFund.sol",
        "file": "./IndividualInvestmentFund.sol",
        "id": 10608,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10792,
        "sourceUnit": 10917,
        "src": "128:40:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/account/DAOInvestmentFund/DAOInvestmentFundBase.sol",
        "file": "./DAOInvestmentFund/DAOInvestmentFundBase.sol",
        "id": 10609,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10792,
        "sourceUnit": 10605,
        "src": "169:55:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 10611,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3651,
              "src": "719:13:53"
            },
            "id": 10612,
            "nodeType": "InheritanceSpecifier",
            "src": "719:13:53"
          }
        ],
        "canonicalName": "FundFactory",
        "contractDependencies": [
          10916
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 10610,
          "nodeType": "StructuredDocumentation",
          "src": "226:468:53",
          "text": " @notice THIS IS THE `FundFactory` contract\n @dev Description:\n This contract will function as a manager + factory for the investment fund contracts.\n Some of the main functionality for the `FundFactory` contract will be to:\n - Create a new user fund\n - \"Burning\" exsiting user's fund\n - Managing access control to protect user's account\n Currently there are two types of funds:\n - Individual Investment Fund\n - DAO Investment Fund"
        },
        "fullyImplemented": true,
        "id": 10791,
        "linearizedBaseContracts": [
          10791,
          3651
        ],
        "name": "FundFactory",
        "nameLocation": "704:11:53",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "FundFactory.InvestmentFundType",
            "id": 10615,
            "members": [
              {
                "id": 10613,
                "name": "INDIVIDUAL",
                "nameLocation": "773:10:53",
                "nodeType": "EnumValue",
                "src": "773:10:53"
              },
              {
                "id": 10614,
                "name": "DAO",
                "nameLocation": "793:3:53",
                "nodeType": "EnumValue",
                "src": "793:3:53"
              }
            ],
            "name": "InvestmentFundType",
            "nameLocation": "744:18:53",
            "nodeType": "EnumDefinition",
            "src": "739:63:53"
          },
          {
            "constant": false,
            "documentation": {
              "id": 10616,
              "nodeType": "StructuredDocumentation",
              "src": "808:278:53",
              "text": " Fund REGISTRIES\n The registry variables is used to store users account information in mapping type\n - first address is for user address, e.g. msg.sender\n - second address is for fund's address (type: individual or DAO investment fund)"
            },
            "functionSelector": "8c372db1",
            "id": 10620,
            "mutability": "mutable",
            "name": "individualInvestmentFundRegistry",
            "nameLocation": "1126:32:53",
            "nodeType": "VariableDeclaration",
            "scope": 10791,
            "src": "1091:67:53",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
              "typeString": "mapping(address => address)"
            },
            "typeName": {
              "id": 10619,
              "keyType": {
                "id": 10617,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1099:7:53",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1091:27:53",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                "typeString": "mapping(address => address)"
              },
              "valueType": {
                "id": 10618,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1110:7:53",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8564c5f6",
            "id": 10624,
            "mutability": "mutable",
            "name": "daoInvestmentFundRegistry",
            "nameLocation": "1199:25:53",
            "nodeType": "VariableDeclaration",
            "scope": 10791,
            "src": "1164:60:53",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
              "typeString": "mapping(address => address)"
            },
            "typeName": {
              "id": 10623,
              "keyType": {
                "id": 10621,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1172:7:53",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1164:27:53",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                "typeString": "mapping(address => address)"
              },
              "valueType": {
                "id": 10622,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1183:7:53",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 10644,
              "nodeType": "Block",
              "src": "1428:196:53",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 10639,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 10634,
                              "name": "investmentFund",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10628,
                              "src": "1481:14:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                                "typeString": "enum FundFactory.InvestmentFundType"
                              }
                            },
                            {
                              "expression": {
                                "id": 10635,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1497:3:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 10636,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1497:10:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                                "typeString": "enum FundFactory.InvestmentFundType"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 10633,
                            "name": "getAccountAddressById",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10690,
                            "src": "1459:21:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_enum$_InvestmentFundType_$10615_$_t_address_$returns$_t_address_$",
                              "typeString": "function (enum FundFactory.InvestmentFundType,address) view returns (address)"
                            }
                          },
                          "id": 10637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1459:49:53",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 10638,
                          "name": "accountAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10630,
                          "src": "1512:14:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1459:67:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7520617265206e6f7420746865206163636f756e74206f776e6572206f662074686973206163636f756e74206164647265737321",
                        "id": 10640,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1540:56:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_618531ce49e1580eb7546fba5da436232be0a2d19444432fb69404fd555f1936",
                          "typeString": "literal_string \"You are not the account owner of this account address!\""
                        },
                        "value": "You are not the account owner of this account address!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_618531ce49e1580eb7546fba5da436232be0a2d19444432fb69404fd555f1936",
                          "typeString": "literal_string \"You are not the account owner of this account address!\""
                        }
                      ],
                      "id": 10632,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1438:7:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10641,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1438:168:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10642,
                  "nodeType": "ExpressionStatement",
                  "src": "1438:168:53"
                },
                {
                  "id": 10643,
                  "nodeType": "PlaceholderStatement",
                  "src": "1616:1:53"
                }
              ]
            },
            "documentation": {
              "id": 10625,
              "nodeType": "StructuredDocumentation",
              "src": "1231:88:53",
              "text": " @dev Check whether `msg.sender` is the fund owner of `accountAddress`"
            },
            "id": 10645,
            "name": "onlyFundOwner",
            "nameLocation": "1333:13:53",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 10631,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10628,
                  "mutability": "mutable",
                  "name": "investmentFund",
                  "nameLocation": "1375:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10645,
                  "src": "1356:33:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                    "typeString": "enum FundFactory.InvestmentFundType"
                  },
                  "typeName": {
                    "id": 10627,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10626,
                      "name": "InvestmentFundType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10615,
                      "src": "1356:18:53"
                    },
                    "referencedDeclaration": 10615,
                    "src": "1356:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10630,
                  "mutability": "mutable",
                  "name": "accountAddress",
                  "nameLocation": "1407:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10645,
                  "src": "1399:22:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10629,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1399:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1346:81:53"
            },
            "src": "1324:300:53",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 10651,
              "nodeType": "Block",
              "src": "1709:2:53",
              "statements": []
            },
            "documentation": {
              "id": 10646,
              "nodeType": "StructuredDocumentation",
              "src": "1630:48:53",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 10652,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "id": 10649,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 10648,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3625,
                  "src": "1697:11:53"
                },
                "nodeType": "ModifierInvocation",
                "src": "1697:11:53"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10647,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1694:2:53"
            },
            "returnParameters": {
              "id": 10650,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1709:0:53"
            },
            "scope": 10791,
            "src": "1683:28:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10689,
              "nodeType": "Block",
              "src": "1917:308:53",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    },
                    "id": 10666,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 10663,
                      "name": "investmentFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10656,
                      "src": "1931:14:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 10664,
                        "name": "InvestmentFundType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10615,
                        "src": "1949:18:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                          "typeString": "type(enum FundFactory.InvestmentFundType)"
                        }
                      },
                      "id": 10665,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "INDIVIDUAL",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10613,
                      "src": "1949:29:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "src": "1931:47:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      },
                      "id": 10675,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 10672,
                        "name": "investmentFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10656,
                        "src": "2063:14:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 10673,
                          "name": "InvestmentFundType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10615,
                          "src": "2081:18:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                            "typeString": "type(enum FundFactory.InvestmentFundType)"
                          }
                        },
                        "id": 10674,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "DAO",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10614,
                        "src": "2081:22:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "src": "2063:40:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "id": 10686,
                      "nodeType": "Block",
                      "src": "2177:42:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 10683,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2206:1:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 10682,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2198:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 10681,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2198:7:53",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 10684,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2198:10:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "functionReturnParameters": 10662,
                          "id": 10685,
                          "nodeType": "Return",
                          "src": "2191:17:53"
                        }
                      ]
                    },
                    "id": 10687,
                    "nodeType": "IfStatement",
                    "src": "2059:160:53",
                    "trueBody": {
                      "id": 10680,
                      "nodeType": "Block",
                      "src": "2105:66:53",
                      "statements": [
                        {
                          "expression": {
                            "baseExpression": {
                              "id": 10676,
                              "name": "daoInvestmentFundRegistry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10624,
                              "src": "2126:25:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                "typeString": "mapping(address => address)"
                              }
                            },
                            "id": 10678,
                            "indexExpression": {
                              "id": 10677,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10658,
                              "src": "2152:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2126:34:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "functionReturnParameters": 10662,
                          "id": 10679,
                          "nodeType": "Return",
                          "src": "2119:41:53"
                        }
                      ]
                    }
                  },
                  "id": 10688,
                  "nodeType": "IfStatement",
                  "src": "1927:292:53",
                  "trueBody": {
                    "id": 10671,
                    "nodeType": "Block",
                    "src": "1980:73:53",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 10667,
                            "name": "individualInvestmentFundRegistry",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10620,
                            "src": "2001:32:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                              "typeString": "mapping(address => address)"
                            }
                          },
                          "id": 10669,
                          "indexExpression": {
                            "id": 10668,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10658,
                            "src": "2034:7:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2001:41:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 10662,
                        "id": 10670,
                        "nodeType": "Return",
                        "src": "1994:48:53"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 10653,
              "nodeType": "StructuredDocumentation",
              "src": "1717:58:53",
              "text": " @dev Get Account address by `accountId`"
            },
            "id": 10690,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAccountAddressById",
            "nameLocation": "1789:21:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10656,
                  "mutability": "mutable",
                  "name": "investmentFund",
                  "nameLocation": "1839:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10690,
                  "src": "1820:33:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                    "typeString": "enum FundFactory.InvestmentFundType"
                  },
                  "typeName": {
                    "id": 10655,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10654,
                      "name": "InvestmentFundType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10615,
                      "src": "1820:18:53"
                    },
                    "referencedDeclaration": 10615,
                    "src": "1820:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10658,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "1871:7:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10690,
                  "src": "1863:15:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10657,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1863:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1810:74:53"
            },
            "returnParameters": {
              "id": 10662,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10661,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10690,
                  "src": "1908:7:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10660,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1908:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1907:9:53"
            },
            "scope": 10791,
            "src": "1780:445:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 10742,
              "nodeType": "Block",
              "src": "2381:591:53",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    },
                    "id": 10700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 10697,
                      "name": "investmentFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10694,
                      "src": "2395:14:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 10698,
                        "name": "InvestmentFundType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10615,
                        "src": "2413:18:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                          "typeString": "type(enum FundFactory.InvestmentFundType)"
                        }
                      },
                      "id": 10699,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "INDIVIDUAL",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10613,
                      "src": "2413:29:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "src": "2395:47:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      },
                      "id": 10723,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 10720,
                        "name": "investmentFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10694,
                        "src": "2691:14:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 10721,
                          "name": "InvestmentFundType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10615,
                          "src": "2709:18:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                            "typeString": "type(enum FundFactory.InvestmentFundType)"
                          }
                        },
                        "id": 10722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "DAO",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10614,
                        "src": "2709:22:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "src": "2691:40:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "id": 10739,
                      "nodeType": "Block",
                      "src": "2903:63:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "hexValue": "4e6f7420612076616c6964206163636f756e74496420676976656e21",
                                "id": 10736,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2924:30:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_15f7cccdd529e230fa3f5cde8f5e4708c0979762d555cc2f8991d383cd98b14c",
                                  "typeString": "literal_string \"Not a valid accountId given!\""
                                },
                                "value": "Not a valid accountId given!"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_15f7cccdd529e230fa3f5cde8f5e4708c0979762d555cc2f8991d383cd98b14c",
                                  "typeString": "literal_string \"Not a valid accountId given!\""
                                }
                              ],
                              "id": 10735,
                              "name": "revert",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                4294967277,
                                4294967277
                              ],
                              "referencedDeclaration": 4294967277,
                              "src": "2917:6:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                "typeString": "function (string memory) pure"
                              }
                            },
                            "id": 10737,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2917:38:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 10738,
                          "nodeType": "ExpressionStatement",
                          "src": "2917:38:53"
                        }
                      ]
                    },
                    "id": 10740,
                    "nodeType": "IfStatement",
                    "src": "2687:279:53",
                    "trueBody": {
                      "id": 10734,
                      "nodeType": "Block",
                      "src": "2733:164:53",
                      "statements": [
                        {
                          "expression": {
                            "id": 10732,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "baseExpression": {
                                "id": 10724,
                                "name": "daoInvestmentFundRegistry",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10624,
                                "src": "2836:25:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                  "typeString": "mapping(address => address)"
                                }
                              },
                              "id": 10727,
                              "indexExpression": {
                                "expression": {
                                  "id": 10725,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2862:3:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 10726,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2862:10:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "nodeType": "IndexAccess",
                              "src": "2836:37:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 10730,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2884:1:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 10729,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2876:7:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 10728,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2876:7:53",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 10731,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2876:10:53",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "2836:50:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 10733,
                          "nodeType": "ExpressionStatement",
                          "src": "2836:50:53"
                        }
                      ]
                    }
                  },
                  "id": 10741,
                  "nodeType": "IfStatement",
                  "src": "2391:575:53",
                  "trueBody": {
                    "id": 10719,
                    "nodeType": "Block",
                    "src": "2444:237:53",
                    "statements": [
                      {
                        "assignments": [
                          10703
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 10703,
                            "mutability": "mutable",
                            "name": "newIndividualInvestmentFund",
                            "nameLocation": "2483:27:53",
                            "nodeType": "VariableDeclaration",
                            "scope": 10719,
                            "src": "2458:52:53",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                              "typeString": "contract IndividualInvestmentFund"
                            },
                            "typeName": {
                              "id": 10702,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 10701,
                                "name": "IndividualInvestmentFund",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 10916,
                                "src": "2458:24:53"
                              },
                              "referencedDeclaration": 10916,
                              "src": "2458:24:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                                "typeString": "contract IndividualInvestmentFund"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 10708,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 10706,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "2513:28:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_IndividualInvestmentFund_$10916_$",
                              "typeString": "function () returns (contract IndividualInvestmentFund)"
                            },
                            "typeName": {
                              "id": 10705,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 10704,
                                "name": "IndividualInvestmentFund",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 10916,
                                "src": "2517:24:53"
                              },
                              "referencedDeclaration": 10916,
                              "src": "2517:24:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                                "typeString": "contract IndividualInvestmentFund"
                              }
                            }
                          },
                          "id": 10707,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2513:30:53",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                            "typeString": "contract IndividualInvestmentFund"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2458:85:53"
                      },
                      {
                        "expression": {
                          "id": 10717,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 10709,
                              "name": "individualInvestmentFundRegistry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10620,
                              "src": "2557:32:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                "typeString": "mapping(address => address)"
                              }
                            },
                            "id": 10712,
                            "indexExpression": {
                              "expression": {
                                "id": 10710,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2590:3:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 10711,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2590:10:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2557:44:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 10715,
                                "name": "newIndividualInvestmentFund",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10703,
                                "src": "2629:27:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                                  "typeString": "contract IndividualInvestmentFund"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                                  "typeString": "contract IndividualInvestmentFund"
                                }
                              ],
                              "id": 10714,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2604:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 10713,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2604:7:53",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 10716,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2604:66:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2557:113:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 10718,
                        "nodeType": "ExpressionStatement",
                        "src": "2557:113:53"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 10691,
              "nodeType": "StructuredDocumentation",
              "src": "2231:78:53",
              "text": " @dev Create new user account with type based on `accountId`"
            },
            "functionSelector": "9b1332d7",
            "id": 10743,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createNewFund",
            "nameLocation": "2323:13:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10695,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10694,
                  "mutability": "mutable",
                  "name": "investmentFund",
                  "nameLocation": "2356:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10743,
                  "src": "2337:33:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                    "typeString": "enum FundFactory.InvestmentFundType"
                  },
                  "typeName": {
                    "id": 10693,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10692,
                      "name": "InvestmentFundType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10615,
                      "src": "2337:18:53"
                    },
                    "referencedDeclaration": 10615,
                    "src": "2337:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2336:35:53"
            },
            "returnParameters": {
              "id": 10696,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2381:0:53"
            },
            "scope": 10791,
            "src": "2314:658:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 10789,
              "nodeType": "Block",
              "src": "3218:286:53",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    },
                    "id": 10759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 10756,
                      "name": "investmentFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10747,
                      "src": "3232:14:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 10757,
                        "name": "InvestmentFundType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10615,
                        "src": "3250:18:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                          "typeString": "type(enum FundFactory.InvestmentFundType)"
                        }
                      },
                      "id": 10758,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "INDIVIDUAL",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10613,
                      "src": "3250:29:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "src": "3232:47:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      },
                      "id": 10774,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 10771,
                        "name": "investmentFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10747,
                        "src": "3373:14:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 10772,
                          "name": "InvestmentFundType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10615,
                          "src": "3391:18:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                            "typeString": "type(enum FundFactory.InvestmentFundType)"
                          }
                        },
                        "id": 10773,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "DAO",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10614,
                        "src": "3391:22:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "src": "3373:40:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "id": 10786,
                      "nodeType": "Block",
                      "src": "3496:2:53",
                      "statements": []
                    },
                    "id": 10787,
                    "nodeType": "IfStatement",
                    "src": "3369:129:53",
                    "trueBody": {
                      "id": 10785,
                      "nodeType": "Block",
                      "src": "3415:75:53",
                      "statements": [
                        {
                          "expression": {
                            "id": 10783,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "baseExpression": {
                                "id": 10775,
                                "name": "daoInvestmentFundRegistry",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10624,
                                "src": "3429:25:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                  "typeString": "mapping(address => address)"
                                }
                              },
                              "id": 10778,
                              "indexExpression": {
                                "expression": {
                                  "id": 10776,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3455:3:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 10777,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3455:10:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "nodeType": "IndexAccess",
                              "src": "3429:37:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 10781,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3477:1:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 10780,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3469:7:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 10779,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3469:7:53",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 10782,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3469:10:53",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "3429:50:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 10784,
                          "nodeType": "ExpressionStatement",
                          "src": "3429:50:53"
                        }
                      ]
                    }
                  },
                  "id": 10788,
                  "nodeType": "IfStatement",
                  "src": "3228:270:53",
                  "trueBody": {
                    "id": 10770,
                    "nodeType": "Block",
                    "src": "3281:82:53",
                    "statements": [
                      {
                        "expression": {
                          "id": 10768,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 10760,
                              "name": "individualInvestmentFundRegistry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10620,
                              "src": "3295:32:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                "typeString": "mapping(address => address)"
                              }
                            },
                            "id": 10763,
                            "indexExpression": {
                              "expression": {
                                "id": 10761,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3328:3:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 10762,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3328:10:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3295:44:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 10766,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3350:1:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 10765,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3342:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 10764,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3342:7:53",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 10767,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3342:10:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3295:57:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 10769,
                        "nodeType": "ExpressionStatement",
                        "src": "3295:57:53"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 10744,
              "nodeType": "StructuredDocumentation",
              "src": "2978:75:53",
              "text": " @dev \"Burn\" an existing user account of `accountAddress`"
            },
            "functionSelector": "cabed6c9",
            "id": 10790,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 10752,
                    "name": "investmentFund",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10747,
                    "src": "3186:14:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  {
                    "id": 10753,
                    "name": "accountAddress",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10749,
                    "src": "3202:14:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 10754,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 10751,
                  "name": "onlyFundOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10645,
                  "src": "3172:13:53"
                },
                "nodeType": "ModifierInvocation",
                "src": "3172:45:53"
              }
            ],
            "name": "burnExistingFund",
            "nameLocation": "3067:16:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10750,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10747,
                  "mutability": "mutable",
                  "name": "investmentFund",
                  "nameLocation": "3112:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10790,
                  "src": "3093:33:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                    "typeString": "enum FundFactory.InvestmentFundType"
                  },
                  "typeName": {
                    "id": 10746,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10745,
                      "name": "InvestmentFundType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10615,
                      "src": "3093:18:53"
                    },
                    "referencedDeclaration": 10615,
                    "src": "3093:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10749,
                  "mutability": "mutable",
                  "name": "accountAddress",
                  "nameLocation": "3144:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10790,
                  "src": "3136:22:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10748,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3136:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3083:81:53"
            },
            "returnParameters": {
              "id": 10755,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3218:0:53"
            },
            "scope": 10791,
            "src": "3058:446:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 10792,
        "src": "695:2811:53",
        "usedErrors": []
      }
    ],
    "src": "38:3469:53"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/account/FundFactory.sol",
    "exportedSymbols": {
      "AccessControl": [
        484
      ],
      "Address": [
        8316
      ],
      "BaseRelayRecipient": [
        146
      ],
      "Context": [
        8338
      ],
      "DAOInvestmentFundBase": [
        10604
      ],
      "ECDSA": [
        9236
      ],
      "EIP712": [
        9483
      ],
      "ERC165": [
        9507
      ],
      "FundFactory": [
        10791
      ],
      "Governor": [
        1517
      ],
      "GovernorCountingSimple": [
        2756
      ],
      "GovernorSettings": [
        2934
      ],
      "GovernorTimelockControl": [
        3311
      ],
      "GovernorVotes": [
        3351
      ],
      "GovernorVotesQuorumFraction": [
        3458
      ],
      "IAccessControl": [
        557
      ],
      "IERC165": [
        9519
      ],
      "IGovernor": [
        1753
      ],
      "IGovernorTimelock": [
        3499
      ],
      "IRelayRecipient": [
        175
      ],
      "IVotes": [
        3577
      ],
      "IndividualInvestmentFund": [
        10916
      ],
      "Initializable": [
        3651
      ],
      "SafeCast": [
        10000
      ],
      "Strings": [
        8615
      ],
      "TimelockController": [
        2532
      ],
      "Timers": [
        8829
      ]
    },
    "id": 10792,
    "license": "AGPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10606,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "38:24:53"
      },
      {
        "absolutePath": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
        "id": 10607,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10792,
        "sourceUnit": 3652,
        "src": "64:63:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/account/IndividualInvestmentFund.sol",
        "file": "./IndividualInvestmentFund.sol",
        "id": 10608,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10792,
        "sourceUnit": 10917,
        "src": "128:40:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/account/DAOInvestmentFund/DAOInvestmentFundBase.sol",
        "file": "./DAOInvestmentFund/DAOInvestmentFundBase.sol",
        "id": 10609,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10792,
        "sourceUnit": 10605,
        "src": "169:55:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 10611,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3651,
              "src": "719:13:53"
            },
            "id": 10612,
            "nodeType": "InheritanceSpecifier",
            "src": "719:13:53"
          }
        ],
        "canonicalName": "FundFactory",
        "contractDependencies": [
          10916
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 10610,
          "nodeType": "StructuredDocumentation",
          "src": "226:468:53",
          "text": " @notice THIS IS THE `FundFactory` contract\n @dev Description:\n This contract will function as a manager + factory for the investment fund contracts.\n Some of the main functionality for the `FundFactory` contract will be to:\n - Create a new user fund\n - \"Burning\" exsiting user's fund\n - Managing access control to protect user's account\n Currently there are two types of funds:\n - Individual Investment Fund\n - DAO Investment Fund"
        },
        "fullyImplemented": true,
        "id": 10791,
        "linearizedBaseContracts": [
          10791,
          3651
        ],
        "name": "FundFactory",
        "nameLocation": "704:11:53",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "FundFactory.InvestmentFundType",
            "id": 10615,
            "members": [
              {
                "id": 10613,
                "name": "INDIVIDUAL",
                "nameLocation": "773:10:53",
                "nodeType": "EnumValue",
                "src": "773:10:53"
              },
              {
                "id": 10614,
                "name": "DAO",
                "nameLocation": "793:3:53",
                "nodeType": "EnumValue",
                "src": "793:3:53"
              }
            ],
            "name": "InvestmentFundType",
            "nameLocation": "744:18:53",
            "nodeType": "EnumDefinition",
            "src": "739:63:53"
          },
          {
            "constant": false,
            "documentation": {
              "id": 10616,
              "nodeType": "StructuredDocumentation",
              "src": "808:278:53",
              "text": " Fund REGISTRIES\n The registry variables is used to store users account information in mapping type\n - first address is for user address, e.g. msg.sender\n - second address is for fund's address (type: individual or DAO investment fund)"
            },
            "functionSelector": "8c372db1",
            "id": 10620,
            "mutability": "mutable",
            "name": "individualInvestmentFundRegistry",
            "nameLocation": "1126:32:53",
            "nodeType": "VariableDeclaration",
            "scope": 10791,
            "src": "1091:67:53",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
              "typeString": "mapping(address => address)"
            },
            "typeName": {
              "id": 10619,
              "keyType": {
                "id": 10617,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1099:7:53",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1091:27:53",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                "typeString": "mapping(address => address)"
              },
              "valueType": {
                "id": 10618,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1110:7:53",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8564c5f6",
            "id": 10624,
            "mutability": "mutable",
            "name": "daoInvestmentFundRegistry",
            "nameLocation": "1199:25:53",
            "nodeType": "VariableDeclaration",
            "scope": 10791,
            "src": "1164:60:53",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
              "typeString": "mapping(address => address)"
            },
            "typeName": {
              "id": 10623,
              "keyType": {
                "id": 10621,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1172:7:53",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "1164:27:53",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                "typeString": "mapping(address => address)"
              },
              "valueType": {
                "id": 10622,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1183:7:53",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 10644,
              "nodeType": "Block",
              "src": "1428:196:53",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 10639,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 10634,
                              "name": "investmentFund",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10628,
                              "src": "1481:14:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                                "typeString": "enum FundFactory.InvestmentFundType"
                              }
                            },
                            {
                              "expression": {
                                "id": 10635,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1497:3:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 10636,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1497:10:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                                "typeString": "enum FundFactory.InvestmentFundType"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 10633,
                            "name": "getAccountAddressById",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10690,
                            "src": "1459:21:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_enum$_InvestmentFundType_$10615_$_t_address_$returns$_t_address_$",
                              "typeString": "function (enum FundFactory.InvestmentFundType,address) view returns (address)"
                            }
                          },
                          "id": 10637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1459:49:53",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 10638,
                          "name": "accountAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10630,
                          "src": "1512:14:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1459:67:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f7520617265206e6f7420746865206163636f756e74206f776e6572206f662074686973206163636f756e74206164647265737321",
                        "id": 10640,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1540:56:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_618531ce49e1580eb7546fba5da436232be0a2d19444432fb69404fd555f1936",
                          "typeString": "literal_string \"You are not the account owner of this account address!\""
                        },
                        "value": "You are not the account owner of this account address!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_618531ce49e1580eb7546fba5da436232be0a2d19444432fb69404fd555f1936",
                          "typeString": "literal_string \"You are not the account owner of this account address!\""
                        }
                      ],
                      "id": 10632,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "1438:7:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10641,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1438:168:53",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10642,
                  "nodeType": "ExpressionStatement",
                  "src": "1438:168:53"
                },
                {
                  "id": 10643,
                  "nodeType": "PlaceholderStatement",
                  "src": "1616:1:53"
                }
              ]
            },
            "documentation": {
              "id": 10625,
              "nodeType": "StructuredDocumentation",
              "src": "1231:88:53",
              "text": " @dev Check whether `msg.sender` is the fund owner of `accountAddress`"
            },
            "id": 10645,
            "name": "onlyFundOwner",
            "nameLocation": "1333:13:53",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 10631,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10628,
                  "mutability": "mutable",
                  "name": "investmentFund",
                  "nameLocation": "1375:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10645,
                  "src": "1356:33:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                    "typeString": "enum FundFactory.InvestmentFundType"
                  },
                  "typeName": {
                    "id": 10627,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10626,
                      "name": "InvestmentFundType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10615,
                      "src": "1356:18:53"
                    },
                    "referencedDeclaration": 10615,
                    "src": "1356:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10630,
                  "mutability": "mutable",
                  "name": "accountAddress",
                  "nameLocation": "1407:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10645,
                  "src": "1399:22:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10629,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1399:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1346:81:53"
            },
            "src": "1324:300:53",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 10651,
              "nodeType": "Block",
              "src": "1709:2:53",
              "statements": []
            },
            "documentation": {
              "id": 10646,
              "nodeType": "StructuredDocumentation",
              "src": "1630:48:53",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 10652,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "id": 10649,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 10648,
                  "name": "initializer",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 3625,
                  "src": "1697:11:53"
                },
                "nodeType": "ModifierInvocation",
                "src": "1697:11:53"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10647,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1694:2:53"
            },
            "returnParameters": {
              "id": 10650,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1709:0:53"
            },
            "scope": 10791,
            "src": "1683:28:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10689,
              "nodeType": "Block",
              "src": "1917:308:53",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    },
                    "id": 10666,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 10663,
                      "name": "investmentFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10656,
                      "src": "1931:14:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 10664,
                        "name": "InvestmentFundType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10615,
                        "src": "1949:18:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                          "typeString": "type(enum FundFactory.InvestmentFundType)"
                        }
                      },
                      "id": 10665,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "INDIVIDUAL",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10613,
                      "src": "1949:29:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "src": "1931:47:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      },
                      "id": 10675,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 10672,
                        "name": "investmentFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10656,
                        "src": "2063:14:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 10673,
                          "name": "InvestmentFundType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10615,
                          "src": "2081:18:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                            "typeString": "type(enum FundFactory.InvestmentFundType)"
                          }
                        },
                        "id": 10674,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "DAO",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10614,
                        "src": "2081:22:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "src": "2063:40:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "id": 10686,
                      "nodeType": "Block",
                      "src": "2177:42:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 10683,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2206:1:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 10682,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2198:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 10681,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2198:7:53",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 10684,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2198:10:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "functionReturnParameters": 10662,
                          "id": 10685,
                          "nodeType": "Return",
                          "src": "2191:17:53"
                        }
                      ]
                    },
                    "id": 10687,
                    "nodeType": "IfStatement",
                    "src": "2059:160:53",
                    "trueBody": {
                      "id": 10680,
                      "nodeType": "Block",
                      "src": "2105:66:53",
                      "statements": [
                        {
                          "expression": {
                            "baseExpression": {
                              "id": 10676,
                              "name": "daoInvestmentFundRegistry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10624,
                              "src": "2126:25:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                "typeString": "mapping(address => address)"
                              }
                            },
                            "id": 10678,
                            "indexExpression": {
                              "id": 10677,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10658,
                              "src": "2152:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2126:34:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "functionReturnParameters": 10662,
                          "id": 10679,
                          "nodeType": "Return",
                          "src": "2119:41:53"
                        }
                      ]
                    }
                  },
                  "id": 10688,
                  "nodeType": "IfStatement",
                  "src": "1927:292:53",
                  "trueBody": {
                    "id": 10671,
                    "nodeType": "Block",
                    "src": "1980:73:53",
                    "statements": [
                      {
                        "expression": {
                          "baseExpression": {
                            "id": 10667,
                            "name": "individualInvestmentFundRegistry",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10620,
                            "src": "2001:32:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                              "typeString": "mapping(address => address)"
                            }
                          },
                          "id": 10669,
                          "indexExpression": {
                            "id": 10668,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10658,
                            "src": "2034:7:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2001:41:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 10662,
                        "id": 10670,
                        "nodeType": "Return",
                        "src": "1994:48:53"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 10653,
              "nodeType": "StructuredDocumentation",
              "src": "1717:58:53",
              "text": " @dev Get Account address by `accountId`"
            },
            "id": 10690,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAccountAddressById",
            "nameLocation": "1789:21:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10656,
                  "mutability": "mutable",
                  "name": "investmentFund",
                  "nameLocation": "1839:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10690,
                  "src": "1820:33:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                    "typeString": "enum FundFactory.InvestmentFundType"
                  },
                  "typeName": {
                    "id": 10655,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10654,
                      "name": "InvestmentFundType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10615,
                      "src": "1820:18:53"
                    },
                    "referencedDeclaration": 10615,
                    "src": "1820:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10658,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "1871:7:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10690,
                  "src": "1863:15:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10657,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1863:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1810:74:53"
            },
            "returnParameters": {
              "id": 10662,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10661,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10690,
                  "src": "1908:7:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10660,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1908:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1907:9:53"
            },
            "scope": 10791,
            "src": "1780:445:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 10742,
              "nodeType": "Block",
              "src": "2381:591:53",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    },
                    "id": 10700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 10697,
                      "name": "investmentFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10694,
                      "src": "2395:14:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 10698,
                        "name": "InvestmentFundType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10615,
                        "src": "2413:18:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                          "typeString": "type(enum FundFactory.InvestmentFundType)"
                        }
                      },
                      "id": 10699,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "INDIVIDUAL",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10613,
                      "src": "2413:29:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "src": "2395:47:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      },
                      "id": 10723,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 10720,
                        "name": "investmentFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10694,
                        "src": "2691:14:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 10721,
                          "name": "InvestmentFundType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10615,
                          "src": "2709:18:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                            "typeString": "type(enum FundFactory.InvestmentFundType)"
                          }
                        },
                        "id": 10722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "DAO",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10614,
                        "src": "2709:22:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "src": "2691:40:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "id": 10739,
                      "nodeType": "Block",
                      "src": "2903:63:53",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "hexValue": "4e6f7420612076616c6964206163636f756e74496420676976656e21",
                                "id": 10736,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2924:30:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_15f7cccdd529e230fa3f5cde8f5e4708c0979762d555cc2f8991d383cd98b14c",
                                  "typeString": "literal_string \"Not a valid accountId given!\""
                                },
                                "value": "Not a valid accountId given!"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_15f7cccdd529e230fa3f5cde8f5e4708c0979762d555cc2f8991d383cd98b14c",
                                  "typeString": "literal_string \"Not a valid accountId given!\""
                                }
                              ],
                              "id": 10735,
                              "name": "revert",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                4294967277,
                                4294967277
                              ],
                              "referencedDeclaration": 4294967277,
                              "src": "2917:6:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                "typeString": "function (string memory) pure"
                              }
                            },
                            "id": 10737,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2917:38:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 10738,
                          "nodeType": "ExpressionStatement",
                          "src": "2917:38:53"
                        }
                      ]
                    },
                    "id": 10740,
                    "nodeType": "IfStatement",
                    "src": "2687:279:53",
                    "trueBody": {
                      "id": 10734,
                      "nodeType": "Block",
                      "src": "2733:164:53",
                      "statements": [
                        {
                          "expression": {
                            "id": 10732,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "baseExpression": {
                                "id": 10724,
                                "name": "daoInvestmentFundRegistry",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10624,
                                "src": "2836:25:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                  "typeString": "mapping(address => address)"
                                }
                              },
                              "id": 10727,
                              "indexExpression": {
                                "expression": {
                                  "id": 10725,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2862:3:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 10726,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2862:10:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "nodeType": "IndexAccess",
                              "src": "2836:37:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 10730,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2884:1:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 10729,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2876:7:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 10728,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2876:7:53",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 10731,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2876:10:53",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "2836:50:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 10733,
                          "nodeType": "ExpressionStatement",
                          "src": "2836:50:53"
                        }
                      ]
                    }
                  },
                  "id": 10741,
                  "nodeType": "IfStatement",
                  "src": "2391:575:53",
                  "trueBody": {
                    "id": 10719,
                    "nodeType": "Block",
                    "src": "2444:237:53",
                    "statements": [
                      {
                        "assignments": [
                          10703
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 10703,
                            "mutability": "mutable",
                            "name": "newIndividualInvestmentFund",
                            "nameLocation": "2483:27:53",
                            "nodeType": "VariableDeclaration",
                            "scope": 10719,
                            "src": "2458:52:53",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                              "typeString": "contract IndividualInvestmentFund"
                            },
                            "typeName": {
                              "id": 10702,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 10701,
                                "name": "IndividualInvestmentFund",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 10916,
                                "src": "2458:24:53"
                              },
                              "referencedDeclaration": 10916,
                              "src": "2458:24:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                                "typeString": "contract IndividualInvestmentFund"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 10708,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 10706,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "2513:28:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_IndividualInvestmentFund_$10916_$",
                              "typeString": "function () returns (contract IndividualInvestmentFund)"
                            },
                            "typeName": {
                              "id": 10705,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 10704,
                                "name": "IndividualInvestmentFund",
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 10916,
                                "src": "2517:24:53"
                              },
                              "referencedDeclaration": 10916,
                              "src": "2517:24:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                                "typeString": "contract IndividualInvestmentFund"
                              }
                            }
                          },
                          "id": 10707,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2513:30:53",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                            "typeString": "contract IndividualInvestmentFund"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2458:85:53"
                      },
                      {
                        "expression": {
                          "id": 10717,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 10709,
                              "name": "individualInvestmentFundRegistry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10620,
                              "src": "2557:32:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                "typeString": "mapping(address => address)"
                              }
                            },
                            "id": 10712,
                            "indexExpression": {
                              "expression": {
                                "id": 10710,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2590:3:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 10711,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2590:10:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2557:44:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 10715,
                                "name": "newIndividualInvestmentFund",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10703,
                                "src": "2629:27:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                                  "typeString": "contract IndividualInvestmentFund"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_IndividualInvestmentFund_$10916",
                                  "typeString": "contract IndividualInvestmentFund"
                                }
                              ],
                              "id": 10714,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2604:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 10713,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2604:7:53",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 10716,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2604:66:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "2557:113:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 10718,
                        "nodeType": "ExpressionStatement",
                        "src": "2557:113:53"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 10691,
              "nodeType": "StructuredDocumentation",
              "src": "2231:78:53",
              "text": " @dev Create new user account with type based on `accountId`"
            },
            "functionSelector": "9b1332d7",
            "id": 10743,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createNewFund",
            "nameLocation": "2323:13:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10695,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10694,
                  "mutability": "mutable",
                  "name": "investmentFund",
                  "nameLocation": "2356:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10743,
                  "src": "2337:33:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                    "typeString": "enum FundFactory.InvestmentFundType"
                  },
                  "typeName": {
                    "id": 10693,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10692,
                      "name": "InvestmentFundType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10615,
                      "src": "2337:18:53"
                    },
                    "referencedDeclaration": 10615,
                    "src": "2337:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2336:35:53"
            },
            "returnParameters": {
              "id": 10696,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2381:0:53"
            },
            "scope": 10791,
            "src": "2314:658:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 10789,
              "nodeType": "Block",
              "src": "3218:286:53",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    },
                    "id": 10759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 10756,
                      "name": "investmentFund",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10747,
                      "src": "3232:14:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 10757,
                        "name": "InvestmentFundType",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10615,
                        "src": "3250:18:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                          "typeString": "type(enum FundFactory.InvestmentFundType)"
                        }
                      },
                      "id": 10758,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "INDIVIDUAL",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10613,
                      "src": "3250:29:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      }
                    },
                    "src": "3232:47:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                        "typeString": "enum FundFactory.InvestmentFundType"
                      },
                      "id": 10774,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 10771,
                        "name": "investmentFund",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10747,
                        "src": "3373:14:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 10772,
                          "name": "InvestmentFundType",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10615,
                          "src": "3391:18:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_InvestmentFundType_$10615_$",
                            "typeString": "type(enum FundFactory.InvestmentFundType)"
                          }
                        },
                        "id": 10773,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "DAO",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 10614,
                        "src": "3391:22:53",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                          "typeString": "enum FundFactory.InvestmentFundType"
                        }
                      },
                      "src": "3373:40:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "id": 10786,
                      "nodeType": "Block",
                      "src": "3496:2:53",
                      "statements": []
                    },
                    "id": 10787,
                    "nodeType": "IfStatement",
                    "src": "3369:129:53",
                    "trueBody": {
                      "id": 10785,
                      "nodeType": "Block",
                      "src": "3415:75:53",
                      "statements": [
                        {
                          "expression": {
                            "id": 10783,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftHandSide": {
                              "baseExpression": {
                                "id": 10775,
                                "name": "daoInvestmentFundRegistry",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10624,
                                "src": "3429:25:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                  "typeString": "mapping(address => address)"
                                }
                              },
                              "id": 10778,
                              "indexExpression": {
                                "expression": {
                                  "id": 10776,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "3455:3:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 10777,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "3455:10:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "nodeType": "IndexAccess",
                              "src": "3429:37:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "Assignment",
                            "operator": "=",
                            "rightHandSide": {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 10781,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3477:1:53",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 10780,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3469:7:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 10779,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3469:7:53",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 10782,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3469:10:53",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "3429:50:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 10784,
                          "nodeType": "ExpressionStatement",
                          "src": "3429:50:53"
                        }
                      ]
                    }
                  },
                  "id": 10788,
                  "nodeType": "IfStatement",
                  "src": "3228:270:53",
                  "trueBody": {
                    "id": 10770,
                    "nodeType": "Block",
                    "src": "3281:82:53",
                    "statements": [
                      {
                        "expression": {
                          "id": 10768,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 10760,
                              "name": "individualInvestmentFundRegistry",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10620,
                              "src": "3295:32:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_address_$",
                                "typeString": "mapping(address => address)"
                              }
                            },
                            "id": 10763,
                            "indexExpression": {
                              "expression": {
                                "id": 10761,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3328:3:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 10762,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3328:10:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3295:44:53",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 10766,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3350:1:53",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 10765,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3342:7:53",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 10764,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "3342:7:53",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 10767,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3342:10:53",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3295:57:53",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 10769,
                        "nodeType": "ExpressionStatement",
                        "src": "3295:57:53"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 10744,
              "nodeType": "StructuredDocumentation",
              "src": "2978:75:53",
              "text": " @dev \"Burn\" an existing user account of `accountAddress`"
            },
            "functionSelector": "cabed6c9",
            "id": 10790,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 10752,
                    "name": "investmentFund",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10747,
                    "src": "3186:14:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  {
                    "id": 10753,
                    "name": "accountAddress",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 10749,
                    "src": "3202:14:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 10754,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 10751,
                  "name": "onlyFundOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 10645,
                  "src": "3172:13:53"
                },
                "nodeType": "ModifierInvocation",
                "src": "3172:45:53"
              }
            ],
            "name": "burnExistingFund",
            "nameLocation": "3067:16:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10750,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10747,
                  "mutability": "mutable",
                  "name": "investmentFund",
                  "nameLocation": "3112:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10790,
                  "src": "3093:33:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                    "typeString": "enum FundFactory.InvestmentFundType"
                  },
                  "typeName": {
                    "id": 10746,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10745,
                      "name": "InvestmentFundType",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10615,
                      "src": "3093:18:53"
                    },
                    "referencedDeclaration": 10615,
                    "src": "3093:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_InvestmentFundType_$10615",
                      "typeString": "enum FundFactory.InvestmentFundType"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10749,
                  "mutability": "mutable",
                  "name": "accountAddress",
                  "nameLocation": "3144:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10790,
                  "src": "3136:22:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10748,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3136:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3083:81:53"
            },
            "returnParameters": {
              "id": 10755,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3218:0:53"
            },
            "scope": 10791,
            "src": "3058:446:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 10792,
        "src": "695:2811:53",
        "usedErrors": []
      }
    ],
    "src": "38:3469:53"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.11+commit.d7f03943.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.6",
  "updatedAt": "2022-04-07T14:39:13.219Z",
  "devdoc": {
    "details": "Description: This contract will function as a manager + factory for the investment fund contracts. Some of the main functionality for the `FundFactory` contract will be to: - Create a new user fund - \"Burning\" exsiting user's fund - Managing access control to protect user's account Currently there are two types of funds: - Individual Investment Fund - DAO Investment Fund",
    "kind": "dev",
    "methods": {
      "burnExistingFund(uint8,address)": {
        "details": "\"Burn\" an existing user account of `accountAddress`"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createNewFund(uint8)": {
        "details": "Create new user account with type based on `accountId`"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "individualInvestmentFundRegistry(address)": {
        "notice": "Fund REGISTRIES The registry variables is used to store users account information in mapping type - first address is for user address, e.g. msg.sender - second address is for fund's address (type: individual or DAO investment fund)"
      }
    },
    "notice": "THIS IS THE `FundFactory` contract",
    "version": 1
  }
}